{"ast":null,"code":"import { API_KEY, BASE_URL } from './apiConfig';\n\n// פונקציה לחיפוש ערים (Autocomplete)\nexport const fetchCitySuggestions = async query => {\n  try {\n    const response = await fetch(`${BASE_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${query}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch city suggestions');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n};\n\n// פונקציה לקבלת מזג אוויר נוכחי\nexport const fetchCurrentWeather = async locationKey => {\n  try {\n    const response = await fetch(`${BASE_URL}/currentconditions/v1/${locationKey}?apikey=${API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch current weather');\n    }\n    const data = await response.json();\n    return data[0];\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n\n// פונקציה לקבלת תחזית ל-5 ימים\nexport const fetchFiveDayForecast = async locationKey => {\n  try {\n    const response = await fetch(`${BASE_URL}/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch 5-day forecast');\n    }\n    const data = await response.json();\n    return data.DailyForecasts;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n};\nexport const fetchLocationKeyByCoordinates = async (latitude, longitude) => {\n  try {\n    const response = await fetch(`${BASE_URL}/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude},${longitude}`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch location key\");\n    }\n    const data = await response.json();\n    const locationKey = data.Country.ID; // Location key provided by AccuWeather\n    const city = data.AdministrativeArea.EnglishName; // City name\n\n    console.log(\"Location Key:\", locationKey);\n    console.log(\"City:\", city);\n    return {\n      locationKey,\n      city\n    };\n  } catch (error) {\n    console.error(\"Error fetching location key:\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["API_KEY","BASE_URL","fetchCitySuggestions","query","response","fetch","ok","Error","data","json","error","console","fetchCurrentWeather","locationKey","fetchFiveDayForecast","DailyForecasts","fetchLocationKeyByCoordinates","latitude","longitude","Country","ID","city","AdministrativeArea","EnglishName","log"],"sources":["/Users/borisd/Private/Lets Do It Wheater App/weather-app/src/api/weatherApi.js"],"sourcesContent":["import { API_KEY, BASE_URL } from './apiConfig';\r\n\r\n// פונקציה לחיפוש ערים (Autocomplete)\r\nexport const fetchCitySuggestions = async (query) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${query}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch city suggestions');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// פונקציה לקבלת מזג אוויר נוכחי\r\nexport const fetchCurrentWeather = async (locationKey) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/currentconditions/v1/${locationKey}?apikey=${API_KEY}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch current weather');\r\n    }\r\n    const data = await response.json();\r\n    return data[0];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// פונקציה לקבלת תחזית ל-5 ימים\r\nexport const fetchFiveDayForecast = async (locationKey) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch 5-day forecast');\r\n    }\r\n    const data = await response.json();\r\n    return data.DailyForecasts;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchLocationKeyByCoordinates = async (latitude, longitude) => {\r\n\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude},${longitude}`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch location key\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    const locationKey = data.Country.ID; // Location key provided by AccuWeather\r\n    const city = data.AdministrativeArea.EnglishName; // City name\r\n\r\n    console.log(\"Location Key:\", locationKey);\r\n    console.log(\"City:\", city);\r\n\r\n    return { locationKey, city };\r\n  } catch (error) {\r\n    console.error(\"Error fetching location key:\", error);\r\n    return null;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,aAAa;;AAE/C;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,KAAK,IAAK;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,4CAA4CD,OAAO,MAAMG,KAAK,EAAE,CAAC;IACzG,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAOC,WAAW,IAAK;EACxD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,yBAAyBY,WAAW,WAAWb,OAAO,EAAE,CAAC;IACjG,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,oBAAoB,GAAG,MAAOD,WAAW,IAAK;EACzD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,4BAA4BY,WAAW,WAAWb,OAAO,EAAE,CAAC;IACpG,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACO,cAAc;EAC5B,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMM,6BAA6B,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;EAE1E,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,kDAAkDD,OAAO,MAAMiB,QAAQ,IAAIC,SAAS,EAAE,CAAC;IAC/H,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,MAAMI,WAAW,GAAGL,IAAI,CAACW,OAAO,CAACC,EAAE,CAAC,CAAC;IACrC,MAAMC,IAAI,GAAGb,IAAI,CAACc,kBAAkB,CAACC,WAAW,CAAC,CAAC;;IAElDZ,OAAO,CAACa,GAAG,CAAC,eAAe,EAAEX,WAAW,CAAC;IACzCF,OAAO,CAACa,GAAG,CAAC,OAAO,EAAEH,IAAI,CAAC;IAE1B,OAAO;MAAER,WAAW;MAAEQ;IAAK,CAAC;EAC9B,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}